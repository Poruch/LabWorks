#include <iostream>
#include <string>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

int main()
{
	setlocale(LC_ALL, "Russian");

	// Программа создаёт динамический массив с использованием функции malloc() (динамически вделяет память заданного размера).
	// Если массив при выполнении программы больше не будет нужен, то память можно будет и освободить  ().
	// Есть другие варианты - использованием реализованных специальных классов динамических массивов для разных типов...
	// Эти варианты обеспечивают наращивание при необходимости количества элементов и т.п.
	// 
	// Описываем ссылку (адрес) для блока памяти, где будет размещаться массив и размер: 
		int* ptr_ARR; // Ссылочная переменная (указатель)
		int size_ARR;

		// Запрашиваем ввод размера массива: 
		printf("Введите число элементов массива:");
		cin >> size_ARR;

		// Выделяем память под динамический массив: 
		ptr_ARR = (int*)malloc(size_ARR * sizeof(int)); 
		// Размер блока памяти в байтах равен количеству элементов (size_ARR), 
		// умноженному на размер элемента в байтах (sizeof(int) - функция возвращает количество байтов для значения указанного типа)

		// Проверяем, выделена ли память (если нет, то ссылка - адрес - будет NULL): 
		if (ptr_ARR == NULL) // Ссылки (адреса) можно проверять на равенство
			{
			printf("Память не выделена!\n");
			}
		else 
			{
			// Память для массива выделена успешно - с ним можно работать: 
			printf("Память выделена! \n");

			// Записываем элементы в массив: 
			for (int j = 0; j < size_ARR; ++j) 
			{
				ptr_ARR[j] = j + 1; // Значение элемента - его номер (нумерация начинается с 1)
			}

			// Вывод элементов массива: 
			printf("Массив содержит следующие элементы: \n");
			for (int k = 0; k < size_ARR; ++k) {
				printf("%d, ", ptr_ARR[k]);
			}
			printf("\nВыведены все элементы! \n");


			// Освобождаем память, если дальше в программе этот массив больше не будет использоваться:
			free(ptr_ARR); // Память освобождается, но остаётся "висячая ссылка"...
			
		}

		system("pause");

		return 0;

}
